/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AppRouteImport } from './routes/app/route'
import { Route as AppIndexImport } from './routes/app/index'
import { Route as AppConversationIdImport } from './routes/app/$conversationId'

// Create/Update Routes

const AppRouteRoute = AppRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRoute,
} as any)

const AppIndexRoute = AppIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRouteRoute,
} as any)

const AppConversationIdRoute = AppConversationIdImport.update({
  id: '/$conversationId',
  path: '/$conversationId',
  getParentRoute: () => AppRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRoute
    }
    '/app/$conversationId': {
      id: '/app/$conversationId'
      path: '/$conversationId'
      fullPath: '/app/$conversationId'
      preLoaderRoute: typeof AppConversationIdImport
      parentRoute: typeof AppRouteImport
    }
    '/app/': {
      id: '/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppIndexImport
      parentRoute: typeof AppRouteImport
    }
  }
}

// Create and export the route tree

interface AppRouteRouteChildren {
  AppConversationIdRoute: typeof AppConversationIdRoute
  AppIndexRoute: typeof AppIndexRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppConversationIdRoute: AppConversationIdRoute,
  AppIndexRoute: AppIndexRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/app': typeof AppRouteRouteWithChildren
  '/app/$conversationId': typeof AppConversationIdRoute
  '/app/': typeof AppIndexRoute
}

export interface FileRoutesByTo {
  '/app/$conversationId': typeof AppConversationIdRoute
  '/app': typeof AppIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/app': typeof AppRouteRouteWithChildren
  '/app/$conversationId': typeof AppConversationIdRoute
  '/app/': typeof AppIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/app' | '/app/$conversationId' | '/app/'
  fileRoutesByTo: FileRoutesByTo
  to: '/app/$conversationId' | '/app'
  id: '__root__' | '/app' | '/app/$conversationId' | '/app/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AppRouteRoute: typeof AppRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AppRouteRoute: AppRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/app"
      ]
    },
    "/app": {
      "filePath": "app/route.tsx",
      "children": [
        "/app/$conversationId",
        "/app/"
      ]
    },
    "/app/$conversationId": {
      "filePath": "app/$conversationId.tsx",
      "parent": "/app"
    },
    "/app/": {
      "filePath": "app/index.tsx",
      "parent": "/app"
    }
  }
}
ROUTE_MANIFEST_END */
